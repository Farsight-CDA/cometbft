// Code generated by mockery. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// isResponse_Value is an autogenerated mock type for the isResponse_Value type
type isResponse_Value struct {
	mock.Mock
}

// MarshalTo provides a mock function with given fields: _a0
func (_m *isResponse_Value) MarshalTo(_a0 []byte) (int, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for MarshalTo")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func([]byte) (int, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func([]byte) int); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func([]byte) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Size provides a mock function with no fields
func (_m *isResponse_Value) Size() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// isResponse_Value provides a mock function with no fields
func (_m *isResponse_Value) isResponse_Value() {
	_m.Called()
}

// newIsResponse_Value creates a new instance of isResponse_Value. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newIsResponse_Value(t interface {
	mock.TestingT
	Cleanup(func())
}) *isResponse_Value {
	mock := &isResponse_Value{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

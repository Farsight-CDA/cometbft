// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	merkle "github.com/cometbft/cometbft/crypto/merkle"
	mock "github.com/stretchr/testify/mock"
)

// KeyPathFunc is an autogenerated mock type for the KeyPathFunc type
type KeyPathFunc struct {
	mock.Mock
}

// Execute provides a mock function with given fields: path, key
func (_m *KeyPathFunc) Execute(path string, key []byte) (merkle.KeyPath, error) {
	ret := _m.Called(path, key)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 merkle.KeyPath
	var r1 error
	if rf, ok := ret.Get(0).(func(string, []byte) (merkle.KeyPath, error)); ok {
		return rf(path, key)
	}
	if rf, ok := ret.Get(0).(func(string, []byte) merkle.KeyPath); ok {
		r0 = rf(path, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(merkle.KeyPath)
		}
	}

	if rf, ok := ret.Get(1).(func(string, []byte) error); ok {
		r1 = rf(path, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewKeyPathFunc creates a new instance of KeyPathFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKeyPathFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *KeyPathFunc {
	mock := &KeyPathFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

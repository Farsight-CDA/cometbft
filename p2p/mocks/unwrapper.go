// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	proto "github.com/cosmos/gogoproto/proto"
)

// Unwrapper is an autogenerated mock type for the Unwrapper type
type Unwrapper struct {
	mock.Mock
}

// ProtoMessage provides a mock function with no fields
func (_m *Unwrapper) ProtoMessage() {
	_m.Called()
}

// Reset provides a mock function with no fields
func (_m *Unwrapper) Reset() {
	_m.Called()
}

// String provides a mock function with no fields
func (_m *Unwrapper) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Unwrap provides a mock function with no fields
func (_m *Unwrapper) Unwrap() (proto.Message, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Unwrap")
	}

	var r0 proto.Message
	var r1 error
	if rf, ok := ret.Get(0).(func() (proto.Message, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() proto.Message); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(proto.Message)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUnwrapper creates a new instance of Unwrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUnwrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *Unwrapper {
	mock := &Unwrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	p2p "github.com/cometbft/cometbft/p2p"
	mock "github.com/stretchr/testify/mock"
)

// transportLifecycle is an autogenerated mock type for the transportLifecycle type
type transportLifecycle struct {
	mock.Mock
}

// Close provides a mock function with no fields
func (_m *transportLifecycle) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Listen provides a mock function with given fields: _a0
func (_m *transportLifecycle) Listen(_a0 p2p.NetAddress) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Listen")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(p2p.NetAddress) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newTransportLifecycle creates a new instance of transportLifecycle. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newTransportLifecycle(t interface {
	mock.TestingT
	Cleanup(func())
}) *transportLifecycle {
	mock := &transportLifecycle{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

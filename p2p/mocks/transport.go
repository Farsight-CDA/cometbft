// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	p2p "github.com/cometbft/cometbft/p2p"
	mock "github.com/stretchr/testify/mock"
)

// Transport is an autogenerated mock type for the Transport type
type Transport struct {
	mock.Mock
}

// Accept provides a mock function with given fields: _a0
func (_m *Transport) Accept(_a0 p2p.peerConfig) (p2p.Peer, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Accept")
	}

	var r0 p2p.Peer
	var r1 error
	if rf, ok := ret.Get(0).(func(p2p.peerConfig) (p2p.Peer, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(p2p.peerConfig) p2p.Peer); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.Peer)
		}
	}

	if rf, ok := ret.Get(1).(func(p2p.peerConfig) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Cleanup provides a mock function with given fields: _a0
func (_m *Transport) Cleanup(_a0 p2p.Peer) {
	_m.Called(_a0)
}

// Dial provides a mock function with given fields: _a0, _a1
func (_m *Transport) Dial(_a0 p2p.NetAddress, _a1 p2p.peerConfig) (p2p.Peer, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for Dial")
	}

	var r0 p2p.Peer
	var r1 error
	if rf, ok := ret.Get(0).(func(p2p.NetAddress, p2p.peerConfig) (p2p.Peer, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(p2p.NetAddress, p2p.peerConfig) p2p.Peer); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.Peer)
		}
	}

	if rf, ok := ret.Get(1).(func(p2p.NetAddress, p2p.peerConfig) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NetAddress provides a mock function with no fields
func (_m *Transport) NetAddress() p2p.NetAddress {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NetAddress")
	}

	var r0 p2p.NetAddress
	if rf, ok := ret.Get(0).(func() p2p.NetAddress); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(p2p.NetAddress)
	}

	return r0
}

// NewTransport creates a new instance of Transport. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTransport(t interface {
	mock.TestingT
	Cleanup(func())
}) *Transport {
	mock := &Transport{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

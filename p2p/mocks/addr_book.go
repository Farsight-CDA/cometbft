// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	log "github.com/cometbft/cometbft/libs/log"
	mock "github.com/stretchr/testify/mock"

	p2p "github.com/cometbft/cometbft/p2p"

	time "time"
)

// AddrBook is an autogenerated mock type for the AddrBook type
type AddrBook struct {
	mock.Mock
}

// AddAddress provides a mock function with given fields: addr, src
func (_m *AddrBook) AddAddress(addr *p2p.NetAddress, src *p2p.NetAddress) error {
	ret := _m.Called(addr, src)

	if len(ret) == 0 {
		panic("no return value specified for AddAddress")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*p2p.NetAddress, *p2p.NetAddress) error); ok {
		r0 = rf(addr, src)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddOurAddress provides a mock function with given fields: _a0
func (_m *AddrBook) AddOurAddress(_a0 *p2p.NetAddress) {
	_m.Called(_a0)
}

// AddPrivateIDs provides a mock function with given fields: _a0
func (_m *AddrBook) AddPrivateIDs(_a0 []string) {
	_m.Called(_a0)
}

// Empty provides a mock function with no fields
func (_m *AddrBook) Empty() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Empty")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// GetSelection provides a mock function with no fields
func (_m *AddrBook) GetSelection() []*p2p.NetAddress {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetSelection")
	}

	var r0 []*p2p.NetAddress
	if rf, ok := ret.Get(0).(func() []*p2p.NetAddress); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*p2p.NetAddress)
		}
	}

	return r0
}

// GetSelectionWithBias provides a mock function with given fields: biasTowardsNewAddrs
func (_m *AddrBook) GetSelectionWithBias(biasTowardsNewAddrs int) []*p2p.NetAddress {
	ret := _m.Called(biasTowardsNewAddrs)

	if len(ret) == 0 {
		panic("no return value specified for GetSelectionWithBias")
	}

	var r0 []*p2p.NetAddress
	if rf, ok := ret.Get(0).(func(int) []*p2p.NetAddress); ok {
		r0 = rf(biasTowardsNewAddrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*p2p.NetAddress)
		}
	}

	return r0
}

// HasAddress provides a mock function with given fields: _a0
func (_m *AddrBook) HasAddress(_a0 *p2p.NetAddress) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for HasAddress")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*p2p.NetAddress) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsBanned provides a mock function with given fields: _a0
func (_m *AddrBook) IsBanned(_a0 *p2p.NetAddress) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsBanned")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*p2p.NetAddress) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsGood provides a mock function with given fields: _a0
func (_m *AddrBook) IsGood(_a0 *p2p.NetAddress) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for IsGood")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*p2p.NetAddress) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// IsRunning provides a mock function with no fields
func (_m *AddrBook) IsRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// MarkAttempt provides a mock function with given fields: _a0
func (_m *AddrBook) MarkAttempt(_a0 *p2p.NetAddress) {
	_m.Called(_a0)
}

// MarkBad provides a mock function with given fields: _a0, _a1
func (_m *AddrBook) MarkBad(_a0 *p2p.NetAddress, _a1 time.Duration) {
	_m.Called(_a0, _a1)
}

// MarkGood provides a mock function with given fields: _a0
func (_m *AddrBook) MarkGood(_a0 p2p.ID) {
	_m.Called(_a0)
}

// NeedMoreAddrs provides a mock function with no fields
func (_m *AddrBook) NeedMoreAddrs() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for NeedMoreAddrs")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OnReset provides a mock function with no fields
func (_m *AddrBook) OnReset() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OnReset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnStart provides a mock function with no fields
func (_m *AddrBook) OnStart() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OnStart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnStop provides a mock function with no fields
func (_m *AddrBook) OnStop() {
	_m.Called()
}

// OurAddress provides a mock function with given fields: _a0
func (_m *AddrBook) OurAddress(_a0 *p2p.NetAddress) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for OurAddress")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(*p2p.NetAddress) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// PickAddress provides a mock function with given fields: biasTowardsNewAddrs
func (_m *AddrBook) PickAddress(biasTowardsNewAddrs int) *p2p.NetAddress {
	ret := _m.Called(biasTowardsNewAddrs)

	if len(ret) == 0 {
		panic("no return value specified for PickAddress")
	}

	var r0 *p2p.NetAddress
	if rf, ok := ret.Get(0).(func(int) *p2p.NetAddress); ok {
		r0 = rf(biasTowardsNewAddrs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*p2p.NetAddress)
		}
	}

	return r0
}

// Quit provides a mock function with no fields
func (_m *AddrBook) Quit() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Quit")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// ReinstateBadPeers provides a mock function with no fields
func (_m *AddrBook) ReinstateBadPeers() {
	_m.Called()
}

// RemoveAddress provides a mock function with given fields: _a0
func (_m *AddrBook) RemoveAddress(_a0 *p2p.NetAddress) {
	_m.Called(_a0)
}

// Reset provides a mock function with no fields
func (_m *AddrBook) Reset() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Save provides a mock function with no fields
func (_m *AddrBook) Save() {
	_m.Called()
}

// SetLogger provides a mock function with given fields: _a0
func (_m *AddrBook) SetLogger(_a0 log.Logger) {
	_m.Called(_a0)
}

// Size provides a mock function with no fields
func (_m *AddrBook) Size() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// Start provides a mock function with no fields
func (_m *AddrBook) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with no fields
func (_m *AddrBook) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// String provides a mock function with no fields
func (_m *AddrBook) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewAddrBook creates a new instance of AddrBook. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAddrBook(t interface {
	mock.TestingT
	Cleanup(func())
}) *AddrBook {
	mock := &AddrBook{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

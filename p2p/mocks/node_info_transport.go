// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	p2p "github.com/cometbft/cometbft/p2p"
	mock "github.com/stretchr/testify/mock"
)

// nodeInfoTransport is an autogenerated mock type for the nodeInfoTransport type
type nodeInfoTransport struct {
	mock.Mock
}

// CompatibleWith provides a mock function with given fields: other
func (_m *nodeInfoTransport) CompatibleWith(other p2p.NodeInfo) error {
	ret := _m.Called(other)

	if len(ret) == 0 {
		panic("no return value specified for CompatibleWith")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(p2p.NodeInfo) error); ok {
		r0 = rf(other)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validate provides a mock function with no fields
func (_m *nodeInfoTransport) Validate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newNodeInfoTransport creates a new instance of nodeInfoTransport. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newNodeInfoTransport(t interface {
	mock.TestingT
	Cleanup(func())
}) *nodeInfoTransport {
	mock := &nodeInfoTransport{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

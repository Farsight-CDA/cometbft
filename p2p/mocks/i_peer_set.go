// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	net "net"

	mock "github.com/stretchr/testify/mock"

	p2p "github.com/cometbft/cometbft/p2p"
)

// IPeerSet is an autogenerated mock type for the IPeerSet type
type IPeerSet struct {
	mock.Mock
}

// Get provides a mock function with given fields: key
func (_m *IPeerSet) Get(key p2p.ID) p2p.Peer {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 p2p.Peer
	if rf, ok := ret.Get(0).(func(p2p.ID) p2p.Peer); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.Peer)
		}
	}

	return r0
}

// Has provides a mock function with given fields: key
func (_m *IPeerSet) Has(key p2p.ID) bool {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(p2p.ID) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasIP provides a mock function with given fields: ip
func (_m *IPeerSet) HasIP(ip net.IP) bool {
	ret := _m.Called(ip)

	if len(ret) == 0 {
		panic("no return value specified for HasIP")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(net.IP) bool); ok {
		r0 = rf(ip)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// List provides a mock function with no fields
func (_m *IPeerSet) List() []p2p.Peer {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []p2p.Peer
	if rf, ok := ret.Get(0).(func() []p2p.Peer); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]p2p.Peer)
		}
	}

	return r0
}

// Size provides a mock function with no fields
func (_m *IPeerSet) Size() int {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Size")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// NewIPeerSet creates a new instance of IPeerSet. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIPeerSet(t interface {
	mock.TestingT
	Cleanup(func())
}) *IPeerSet {
	mock := &IPeerSet{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

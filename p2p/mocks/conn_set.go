// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	net "net"

	mock "github.com/stretchr/testify/mock"
)

// ConnSet is an autogenerated mock type for the ConnSet type
type ConnSet struct {
	mock.Mock
}

// Has provides a mock function with given fields: _a0
func (_m *ConnSet) Has(_a0 net.Conn) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Has")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(net.Conn) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// HasIP provides a mock function with given fields: _a0
func (_m *ConnSet) HasIP(_a0 net.IP) bool {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for HasIP")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(net.IP) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// Remove provides a mock function with given fields: _a0
func (_m *ConnSet) Remove(_a0 net.Conn) {
	_m.Called(_a0)
}

// RemoveAddr provides a mock function with given fields: _a0
func (_m *ConnSet) RemoveAddr(_a0 net.Addr) {
	_m.Called(_a0)
}

// Set provides a mock function with given fields: _a0, _a1
func (_m *ConnSet) Set(_a0 net.Conn, _a1 []net.IP) {
	_m.Called(_a0, _a1)
}

// NewConnSet creates a new instance of ConnSet. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConnSet(t interface {
	mock.TestingT
	Cleanup(func())
}) *ConnSet {
	mock := &ConnSet{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

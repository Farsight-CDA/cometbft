// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	log "github.com/cometbft/cometbft/libs/log"
	conn "github.com/cometbft/cometbft/p2p/conn"

	mock "github.com/stretchr/testify/mock"

	p2p "github.com/cometbft/cometbft/p2p"
)

// Reactor is an autogenerated mock type for the Reactor type
type Reactor struct {
	mock.Mock
}

// AddPeer provides a mock function with given fields: peer
func (_m *Reactor) AddPeer(peer p2p.Peer) {
	_m.Called(peer)
}

// GetChannels provides a mock function with no fields
func (_m *Reactor) GetChannels() []*conn.ChannelDescriptor {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetChannels")
	}

	var r0 []*conn.ChannelDescriptor
	if rf, ok := ret.Get(0).(func() []*conn.ChannelDescriptor); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*conn.ChannelDescriptor)
		}
	}

	return r0
}

// InitPeer provides a mock function with given fields: peer
func (_m *Reactor) InitPeer(peer p2p.Peer) p2p.Peer {
	ret := _m.Called(peer)

	if len(ret) == 0 {
		panic("no return value specified for InitPeer")
	}

	var r0 p2p.Peer
	if rf, ok := ret.Get(0).(func(p2p.Peer) p2p.Peer); ok {
		r0 = rf(peer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(p2p.Peer)
		}
	}

	return r0
}

// IsRunning provides a mock function with no fields
func (_m *Reactor) IsRunning() bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsRunning")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// OnReset provides a mock function with no fields
func (_m *Reactor) OnReset() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OnReset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnStart provides a mock function with no fields
func (_m *Reactor) OnStart() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for OnStart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OnStop provides a mock function with no fields
func (_m *Reactor) OnStop() {
	_m.Called()
}

// Quit provides a mock function with no fields
func (_m *Reactor) Quit() <-chan struct{} {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Quit")
	}

	var r0 <-chan struct{}
	if rf, ok := ret.Get(0).(func() <-chan struct{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan struct{})
		}
	}

	return r0
}

// Receive provides a mock function with given fields: _a0
func (_m *Reactor) Receive(_a0 p2p.Envelope) {
	_m.Called(_a0)
}

// RemovePeer provides a mock function with given fields: peer, reason
func (_m *Reactor) RemovePeer(peer p2p.Peer, reason interface{}) {
	_m.Called(peer, reason)
}

// Reset provides a mock function with no fields
func (_m *Reactor) Reset() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Reset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetLogger provides a mock function with given fields: _a0
func (_m *Reactor) SetLogger(_a0 log.Logger) {
	_m.Called(_a0)
}

// SetSwitch provides a mock function with given fields: _a0
func (_m *Reactor) SetSwitch(_a0 *p2p.Switch) {
	_m.Called(_a0)
}

// Start provides a mock function with no fields
func (_m *Reactor) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Stop provides a mock function with no fields
func (_m *Reactor) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// String provides a mock function with no fields
func (_m *Reactor) String() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for String")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// NewReactor creates a new instance of Reactor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReactor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Reactor {
	mock := &Reactor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
